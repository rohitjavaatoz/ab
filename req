[II-17092] Tech Story | API to identify attributes in maintenance (Meta data) - GET | BE Only - Safeway Jira

This API will help the UI to determine which all are the fields that need to be shown in editable mode when user click edit core item or edit distribution 

API Endpoint: /item/maintain/metadata

HTTP Method: GET

While giving the response to UI the attributes need to be filtered based on the Auth role, we are receiving in token against isEditableBy attribute in collection

----------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/item/maintain")
public class MetadataController {

    @Autowired
    private MetadataRepository metadataRepository;

    @GetMapping("/metadata")
    public List<MetadataDocument> getAllMetadata() {
        // Assuming you get the authRole from the token or request context
        String authRole = String.valueOf(RequestContextManager.getValue(GlobalConstants.AUTHROLE));

        // Retrieve all metadata documents from MongoDB
        List<MetadataDocument> allMetadata = metadataRepository.findAll();

        // Filter attributes based on authRole for each document
        allMetadata.forEach(metadata -> {
            metadata.getTabs().forEach(tab -> {
                tab.setAttributes(
                    tab.getAttributes().stream()
                        .filter(attribute -> attribute.getIsEditableBy().contains(authRole))
                        .collect(Collectors.toList())
                );
            });
        });

        return allMetadata;
    }
}
--------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/item/maintain")
public class MetadataController {

    @Autowired
    private MetadataRepository metadataRepository;

    @GetMapping("/metadata")
    public MetadataResponseDTO getAllMetadata() {
        // Assuming you get the authRole from the token or request context
        String authRole = String.valueOf(RequestContextManager.getValue(GlobalConstants.AUTHROLE));

        // Retrieve all metadata documents from MongoDB
        List<MetadataDocument> allMetadata = metadataRepository.findAll();

        // Create DTOs for response
        MetadataResponseDTO response = new MetadataResponseDTO();

        // Convert metadata documents to DTOs
        response.setTabs(
            allMetadata.stream()
                .map(metadata -> {
                    TabDTO tabDTO = new TabDTO();
                    tabDTO.setName(metadata.getName());

                    // Convert attributes to DTOs
                    tabDTO.setAttributes(
                        metadata.getAttributes().stream()
                            .filter(attribute -> attribute.getIsEditableBy().contains(authRole))
                            .map(attribute -> {
                                AttributeDTO attributeDTO = new AttributeDTO();
                                attributeDTO.setName(attribute.getName());
                                attributeDTO.setMaintenanceType(attribute.getMaintenanceType());
                                attributeDTO.setIsEditableBy(attribute.getIsEditableBy());
                                attributeDTO.setCicImpacted(attribute.isCicImpacted());
                                return attributeDTO;
                            })
                            .collect(Collectors.toList())
                    );

                    return tabDTO;
                })
                .collect(Collectors.toList())
        );

        return response;
    }
}

