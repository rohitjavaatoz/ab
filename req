[II-17092] Tech Story | API to identify attributes in maintenance (Meta data) - GET | BE Only - Safeway Jira

This API will help the UI to determine which all are the fields that need to be shown in editable mode when user click edit core item or edit distribution 

API Endpoint: /item/maintain/metadata

HTTP Method: GET

While giving the response to UI the attributes need to be filtered based on the Auth role, we are receiving in token against isEditableBy attribute in collection

----------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/item/maintain")
public class MetadataController {

    @Autowired
    private MetadataRepository metadataRepository;

    @GetMapping("/metadata")
    public List<MetadataDocument> getAllMetadata() {
        // Assuming you get the authRole from the token or request context
        String authRole = String.valueOf(RequestContextManager.getValue(GlobalConstants.AUTHROLE));

        // Retrieve all metadata documents from MongoDB
        List<MetadataDocument> allMetadata = metadataRepository.findAll();

        // Filter attributes based on authRole for each document
        allMetadata.forEach(metadata -> {
            metadata.getTabs().forEach(tab -> {
                tab.setAttributes(
                    tab.getAttributes().stream()
                        .filter(attribute -> attribute.getIsEditableBy().contains(authRole))
                        .collect(Collectors.toList())
                );
            });
        });

        return allMetadata;
    }
}
--------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/item/maintain")
public class MetadataController {

    @Autowired
    private MetadataRepository metadataRepository;

    @GetMapping("/metadata")
    public MetadataResponseDTO getAllMetadata() {
        // Assuming you get the authRole from the token or request context
        String authRole = String.valueOf(RequestContextManager.getValue(GlobalConstants.AUTHROLE));

        // Retrieve all metadata documents from MongoDB
        List<MetadataDocument> allMetadata = metadataRepository.findAll();

        // Create DTOs for response
        MetadataResponseDTO response = new MetadataResponseDTO();

        // Convert metadata documents to DTOs
        response.setTabs(
            allMetadata.stream()
                .map(metadata -> {
                    TabDTO tabDTO = new TabDTO();
                    tabDTO.setName(metadata.getName());

                    // Convert attributes to DTOs
                    tabDTO.setAttributes(
                        metadata.getAttributes().stream()
                            .filter(attribute -> attribute.getIsEditableBy().contains(authRole))
                            .map(attribute -> {
                                AttributeDTO attributeDTO = new AttributeDTO();
                                attributeDTO.setName(attribute.getName());
                                attributeDTO.setMaintenanceType(attribute.getMaintenanceType());
                                attributeDTO.setIsEditableBy(attribute.getIsEditableBy());
                                attributeDTO.setCicImpacted(attribute.isCicImpacted());
                                return attributeDTO;
                            })
                            .collect(Collectors.toList())
                    );

                    return tabDTO;
                })
                .collect(Collectors.toList())
        );

        return response;
    }
}
--------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/item/maintain")
public class MetadataController {

    @Autowired
    private MetadataRepository metadataRepository;

    @GetMapping("/metadata")
    public MetadataDocument getMetadata() {
        // Assuming you get the authRole from the token or request context
        String authRole = String.valueOf(RequestContextManager.getValue(GlobalConstants.AUTHROLE));

        // Retrieve all metadata documents from MongoDB
        List<MetadataDocument> allMetadata = metadataRepository.findAll();

        // Initialize a new MetadataDocument to store the filtered result
        MetadataDocument filteredMetadata = new MetadataDocument();
        List<MetadataDocument.Tab> filteredTabs = new ArrayList<>();

        // Iterate through each MetadataDocument
        for (MetadataDocument metadata : allMetadata) {
            MetadataDocument.Tab filteredTab = new MetadataDocument.Tab();
            filteredTab.setName(metadata.getName());

            List<MetadataDocument.Attribute> filteredAttributes = new ArrayList<>();

            // Iterate through each Attribute in the current Tab
            for (MetadataDocument.Attribute attribute : metadata.getAttributes()) {
                // Check if authRole is in the isEditableBy list
                if (attribute.getIsEditableBy().contains(authRole)) {
                    filteredAttributes.add(attribute);
                }
            }

            filteredTab.setAttributes(filteredAttributes);
            filteredTabs.add(filteredTab);
        }

        filteredMetadata.setTabs(filteredTabs);
        return filteredMetadata;
    }
}
------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/item/maintain")
public class MetadataController {

    @Autowired
    private MetadataRepository metadataRepository;

    @GetMapping("/metadata")
    public MetadataResponseDTO getMetadata() {
        // Assuming you get the authRole from the token or request context
        String authRole = String.valueOf(RequestContextManager.getValue(GlobalConstants.AUTHROLE));

        // Retrieve all metadata documents from MongoDB
        List<MetadataDocument> allMetadata = metadataRepository.findAll();

        // Initialize DTOs to store the filtered result
        MetadataResponseDTO responseDTO = new MetadataResponseDTO();
        List<TabDTO> tabDTOs = new ArrayList<>();

        // Iterate through each MetadataDocument
        for (MetadataDocument metadata : allMetadata) {
            TabDTO tabDTO = new TabDTO();
            tabDTO.setName(metadata.getName());

            List<AttributeDTO> attributeDTOs = new ArrayList<>();

            // Iterate through each Attribute in the current Tab
            for (MetadataDocument.Attribute attribute : metadata.getAttributes()) {
                // Check if authRole is "MDS" and attribute is editable by "MDS"
                if ("MDS".equals(authRole) && "MDS".equals(attribute.getIsEditableBy())) {
                    AttributeDTO attributeDTO = new AttributeDTO();
                    attributeDTO.setName(attribute.getName());
                    attributeDTO.setMaintenanceType(attribute.getMaintenanceType());
                    attributeDTO.setIsEditableBy(attribute.getIsEditableBy());
                    attributeDTO.setCicImpacted(attribute.isCicImpacted());
                    attributeDTOs.add(attributeDTO);
                }
            }

            tabDTO.setAttributes(attributeDTOs);
            tabDTOs.add(tabDTO);
        }

        responseDTO.setTabs(tabDTOs);
        return responseDTO;
    }
}
--------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.ArrayList;
import java.util.List;

@Service
public class MetadataService {

    @Autowired
    private MetadataRepository metadataRepository;

    public MetadataResponseDTO getFilteredMetadata(String authRole) {
        List<MetadataDocument> allMetadata = metadataRepository.findAll();
        List<TabDTO> tabDTOs = new ArrayList<>();

        for (MetadataDocument metadata : allMetadata) {
            TabDTO tabDTO = new TabDTO();
            tabDTO.setName(metadata.getName());

            List<AttributeDTO> attributeDTOs = new ArrayList<>();
            for (MetadataDocument.Tab.Attribute attribute : metadata.getTabs().getAttributes()) {
                if (attribute.getIsEditableBy().equals(authRole)) {
                    AttributeDTO attributeDTO = new AttributeDTO();
                    attributeDTO.setName(attribute.getName());
                    attributeDTO.setMaintenanceType(attribute.getMaintenanceType());
                    attributeDTO.setIsEditableBy(attribute.getIsEditableBy());
                    attributeDTO.setCicImpacted(attribute.isCicImpacted());
                    attributeDTOs.add(attributeDTO);
                }
            }

            tabDTO.setAttributes(attributeDTOs);
            tabDTOs.add(tabDTO);
        }

        return new MetadataResponseDTO(tabDTOs);
    }
}

----------------
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Document(collection = "metadata")
public class MetadataDocument {

    @Id
    private String id;

    private List<Tab> tabs;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class Tab {
        private String name;
        private List<Attribute> attributes;

        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        public static class Attribute {
            private String name;
            private String maintenanceType;
            private List<String> isEditableBy;
            private boolean cicImpacted;
        }
    }
}
-----
    List<MetadataDocument> findByTabsAttributesIsEditableBy(String role);
db.collection.find({
  "tabs.attributes": {
    $elemMatch: {
      isEditableBy: "MDS"
    }
  }
})
--------------
@Query("{ 'tabs.attributes.isEditableBy': ?0 }")


---------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class MetadataService {

    @Autowired
    private MetadataRepository metadataRepository;

    public List<MetadataDocument> findByIsEditableBy(String editableBy) {
        List<MetadataDocument> allDocuments = metadataRepository.findAll();

        return allDocuments.stream()
                .map(document -> filterAttributesByEditableBy(document, editableBy))
                .collect(Collectors.toList());
    }

    private MetadataDocument filterAttributesByEditableBy(MetadataDocument document, String editableBy) {
        List<Tab> filteredTabs = document.getTabs().stream()
                .map(tab -> {
                    List<Attribute> filteredAttributes = tab.getAttributes().stream()
                            .filter(attr -> attr.getIsEditableBy().contains(editableBy))
                            .collect(Collectors.toList());

                    // Update tab with filtered attributes
                    tab.setAttributes(filteredAttributes);
                    return tab;
                })
                .collect(Collectors.toList());

        // Update document with filtered tabs
        document.setTabs(filteredTabs);
        return document;
    }
}

