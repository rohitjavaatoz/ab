{
  "tabs": [
    {
      "name": "overview",
        "attributes": [
          {
            "name": "itemDescription",
            "maintenanceType": "WATCHFUL",
            "cicImpacted": false  
          },
          {
            "name": "itemSize",
            "maintenanceType": "WATCHFUL",
            "cicImpacted": true  
          },
          {
            "name": "digitalProductTitle",
            "maintenanceType": "NON-WATCHFUL"
          }
        ]
    },
    {
      "name": "hierarchy",
      "attributes": [
       {
          "name": "description",
          "maintenanceType": "NON-WATCHFUL"
       },
        {
          "name": "size",
          "maintenanceType": "WATCHFUL",
          "cicImpacted": true
        }
      ]
    }
  ]
}
------------
import lombok.Data;

@Data
public class AttributeDTO {
    private String name;
    private String maintenanceType;
    private boolean cicImpacted;
}
---
import java.util.List;
import lombok.Data;

@Data
public class TabDTO {
    private String name;
    private List<AttributeDTO> attributes;
}
----
import java.util.List;
import lombok.Data;

@Data
public class ResponsePayloadDTO {
    private List<TabDTO> tabs;
}

-------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class MaintainMetadataService {

    @Autowired
    private MaintainMetadataRepository repository;

    public ResponsePayloadDTO getMetadataForEditableAttributes(String userRole) {
        MaintainMetadata metadata = repository.findById("metadata_id").orElseThrow(() -> new RuntimeException("Metadata not found"));

        // Filter attributes based on userRole
        metadata.getTabs().forEach(tab -> {
            tab.setAttributes(
                tab.getAttributes().stream()
                    .filter(attr -> userRole.equals(attr.getIsEditableBy()))
                    .collect(Collectors.toList())
            );
        });

        // Return filtered metadata
        ResponsePayloadDTO responsePayloadDTO = new ResponsePayloadDTO();
        responsePayloadDTO.setTabs(metadata.getTabs());
        return responsePayloadDTO;
    }
}
----------
        String authRole = String.valueOf(RequestContextManager.getValue(GlobalConstants.AUTHROLE));


---------
 if (Objects.equals(attribute.getCicImpacted(), Boolean.TRUE)) {
                                                                attributeDTO.setCicImpacted(true);
                                                            } else if (Objects.equals(attribute.getCicImpacted(), Boolean.FALSE)) {
                                                                attributeDTO.setCicImpacted(false);
                                                            } else {
                                                                attributeDTO.setCicImpacted(false); // Default value if null
                                                            }
