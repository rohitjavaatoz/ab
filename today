import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class MetadataService {

    @Autowired
    private MetadataRepository metadataRepository;

    public List<MetadataDocument> findByIsEditableBy(String editableBy) {
        List<MetadataDocument> allDocuments = metadataRepository.findAll();

        return allDocuments.stream()
                .map(document -> filterAttributesByEditableBy(document, editableBy))
                .collect(Collectors.toList());
    }

    private MetadataDocument filterAttributesByEditableBy(MetadataDocument document, String editableBy) {
        List<Tab> filteredTabs = document.getTabs().stream()
                .map(tab -> {
                    List<Attribute> filteredAttributes = tab.getAttributes().stream()
                            .filter(attr -> attr.getIsEditableBy().contains(editableBy))
                            .collect(Collectors.toList());

                    // Update tab with filtered attributes
                    tab.setAttributes(filteredAttributes);
                    return tab;
                })
                .filter(tab -> !tab.getAttributes().isEmpty()) // Filter out tabs with no matching attributes
                .collect(Collectors.toList());

        // Update document with filtered tabs
        document.setTabs(filteredTabs);
        return document;
    }
}
--------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class MetadataService {

    @Autowired
    private MetadataRepository metadataRepository;

    public MetadataResponseDTO findByIsEditableBy(String editableBy) {
        List<MetadataDocument> allDocuments = metadataRepository.findAll();

        // Map MetadataDocument to MetadataResponseDTO
        return mapToResponseDTO(allDocuments, editableBy);
    }

    private MetadataResponseDTO mapToResponseDTO(List<MetadataDocument> documents, String editableBy) {
        MetadataResponseDTO responseDTO = new MetadataResponseDTO();

        List<TabDTO> tabDTOs = documents.stream()
                .map(document -> {
                    TabDTO tabDTO = new TabDTO();
                    tabDTO.setName(document.getName());

                    List<AttributeDTO> attributeDTOs = document.getTabs().stream()
                            .flatMap(tab -> tab.getAttributes().stream())
                            .filter(attr -> attr.getIsEditableBy().contains(editableBy))
                            .map(this::mapToAttributeDTO)
                            .collect(Collectors.toList());

                    tabDTO.setAttributes(attributeDTOs);
                    return tabDTO;
                })
                .collect(Collectors.toList());

        responseDTO.setTabs(tabDTOs);
        return responseDTO;
    }

    private AttributeDTO mapToAttributeDTO(Attribute attribute) {
        AttributeDTO attributeDTO = new AttributeDTO();
        attributeDTO.setName(attribute.getName());
        attributeDTO.setMaintenanceType(attribute.getMaintenanceType());
        attributeDTO.setCicImpacted(attribute.getCicImpacted());
        return attributeDTO;
    }
}
----------------
import lombok.Data;
import java.util.List;

@Data
public class ResponseDto {
    private List<TabDto> tabs;
}

@Data
public class TabDto {
    private String name;
    private List<AttributeDto> attributes;
}

@Data
public class AttributeDto {
    private String name;
    private String maintenanceType;
    private Boolean cicImpacted; // Assuming cicImpacted can be null if not specified
}
------------------

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class TabService {

    @Autowired
    private MongoTemplate mongoTemplate; // Autowire your MongoTemplate

    public ResponseDto getFilteredTabs(String editableBy) {
        // Example logic to fetch from MongoDB using MongoTemplate
        List<TabEntity> tabs = mongoTemplate.findAll(TabEntity.class);

        // Map and filter as per requirements
        List<TabDto> tabDtos = tabs.stream()
            .map(tabEntity -> {
                TabDto tabDto = new TabDto();
                tabDto.setName(tabEntity.getName());
                List<AttributeDto> filteredAttributes = tabEntity.getAttributes().stream()
                    .filter(attr -> attr.getIsEditableBy().contains(editableBy))
                    .map(attr -> {
                        AttributeDto attrDto = new AttributeDto();
                        attrDto.setName(attr.getName());
                        attrDto.setMaintenanceType(attr.getMaintenanceType());
                        attrDto.setCicImpacted(attr.getCicImpacted());
                        return attrDto;
                    })
                    .collect(Collectors.toList());
                tabDto.setAttributes(filteredAttributes);
                return tabDto;
            })
            .collect(Collectors.toList());

        ResponseDto responseDto = new ResponseDto();
        responseDto.setTabs(tabDtos);
        return responseDto;
    }
}
